// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: t24_account.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// T24AccountServiceClient is the client API for T24AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type T24AccountServiceClient interface {
	OpenT24Account(ctx context.Context, in *OpenT24AccountRequest, opts ...grpc.CallOption) (*OpenT24AccountResponse, error)
}

type t24AccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewT24AccountServiceClient(cc grpc.ClientConnInterface) T24AccountServiceClient {
	return &t24AccountServiceClient{cc}
}

func (c *t24AccountServiceClient) OpenT24Account(ctx context.Context, in *OpenT24AccountRequest, opts ...grpc.CallOption) (*OpenT24AccountResponse, error) {
	out := new(OpenT24AccountResponse)
	err := c.cc.Invoke(ctx, "/T24AccountService/OpenT24Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// T24AccountServiceServer is the server API for T24AccountService service.
// All implementations must embed UnimplementedT24AccountServiceServer
// for forward compatibility
type T24AccountServiceServer interface {
	OpenT24Account(context.Context, *OpenT24AccountRequest) (*OpenT24AccountResponse, error)
	mustEmbedUnimplementedT24AccountServiceServer()
}

// UnimplementedT24AccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedT24AccountServiceServer struct {
}

func (UnimplementedT24AccountServiceServer) OpenT24Account(context.Context, *OpenT24AccountRequest) (*OpenT24AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenT24Account not implemented")
}
func (UnimplementedT24AccountServiceServer) mustEmbedUnimplementedT24AccountServiceServer() {}

// UnsafeT24AccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to T24AccountServiceServer will
// result in compilation errors.
type UnsafeT24AccountServiceServer interface {
	mustEmbedUnimplementedT24AccountServiceServer()
}

func RegisterT24AccountServiceServer(s grpc.ServiceRegistrar, srv T24AccountServiceServer) {
	s.RegisterService(&T24AccountService_ServiceDesc, srv)
}

func _T24AccountService_OpenT24Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenT24AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T24AccountServiceServer).OpenT24Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/T24AccountService/OpenT24Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T24AccountServiceServer).OpenT24Account(ctx, req.(*OpenT24AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// T24AccountService_ServiceDesc is the grpc.ServiceDesc for T24AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var T24AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "T24AccountService",
	HandlerType: (*T24AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenT24Account",
			Handler:    _T24AccountService_OpenT24Account_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t24_account.proto",
}
